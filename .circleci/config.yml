version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: node
    steps:
      - checkout   
      - run:
          name: "compile and build"
          command: |
             cd ~/project/frontend && npm i && npm run build
      - persist_to_workspace:
          root: ./
          paths:
             - ./frontend/node_modules  
             
  build-backend:
    docker:
      - image: node
    steps:
      - checkout
      - run:
          name: "compile and build"
          command: |
             cd ~/project/backend && npm i && npm run build
      - persist_to_workspace:
          root: ./
          paths: 
             - ./backend/node_modules  


  test-frontend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Run unit test
          command: |
              cd ~/project/frontend && npm test

  test-backend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Run unit test
          command: |
              cd ~/project/backend && npm run test         

  scan-frontend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: scan front end vulnerabilities
          command: |
              cd ~/project/frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: scan front end vulnerabilities
          command: |
              cd ~/project/backend && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout
      # - run:
      #     name: create stack for backend
      #     command: |
      #         aws cloudformation deploy --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --template-file ~/project/.circleci/files/backend.yml --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: save ips
          command: | 
              curl -H "Content-Type: text/plain" -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request PUT --data "$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output=text)" https://api.memstash.io/values/ips        
      # - run:
      #     name: create S3 bucket for frontend
      #     command: aws s3api create-bucket --bucket "frontend${CIRCLE_WORKFLOW_ID:0:7}" --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
      # - run:
      #     name: save s3 arn bucket
      #     command: |
      #         curl -H "Content-Type: text/plain" -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request PUT --data "arn:PARTITION:s3:::frontend${CIRCLE_WORKFLOW_ID:0:7}" https://api.memstash.io/values/s3bucket      


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps: 
      - checkout 
      - add_ssh_keys:
           fingerprints: ["28:3e:56:65:72:cb:2f:83:41:5b:bd:d4:d5:21:17:e9"]
      - run:
          name: Install dependencies
          command: |
                apk add --update ansible
      - run: 
          name: disbale ssh checking
          command: |
                export ANSIBLE_HOST_KEY_CHECKING=False

      - run: 
          name: Configure server
          command: |
                ehco [all] > ~/inventory.txt &&
                curl -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request GET https://api.memstash.io/values/ips >> ~/inventory.txt && 
                export ANSIBLE_HOST_KEY_CHECKING=False && ansible-playbook  -i ~/inventory.txt .circleci/ansible/roles/configure-server/playbook.yml --extra-vars "TYPEORM_HOST=${TYPEORM_HOST} TYPEORM_PORT=${TYPEORM_PORT} TYPEORM_USERNAME=${TYPEORM_USERNAME} TYPEORM_PASSWORD=${TYPEORM_PASSWORD} TYPEORM_DATABASE=${TYPEORM_DATABASE}"



#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #        - build-frontend
      # - test-backend:
      #     requires:
      #        - build-backend
      # - scan-frontend:
      #     requires:
      #        - test-frontend
      # - scan-backend:
      #     requires:
      #        - test-backend
      - configure-infrastructure
      - deploy-backend:
            requires:
               - configure-infrastructure

