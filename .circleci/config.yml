version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: node
    steps:
      - checkout   
      - run:
          name: "compile and build"
          command: |
             cd ~/project/frontend && npm i && npm run build
      - persist_to_workspace:
          root: ./
          paths:
             - ./frontend/node_modules  
             
  build-backend:
    docker:
      - image: node
    steps:
      - checkout
      - run:
          name: "compile and build"
          command: |
             cd ~/project/backend && npm i && npm run build
      - persist_to_workspace:
          root: ./
          paths: 
             - ./backend/node_modules  


  test-frontend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Run unit test
          command: |
              cd ~/project/frontend && npm test

  test-backend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Run unit test
          command: |
              cd ~/project/backend && npm run test         

  scan-frontend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: scan front end vulnerabilities
          command: |
              cd ~/project/frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: scan front end vulnerabilities
          command: |
              cd ~/project/backend && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run:
          name: create stack for backend
          command: |
              aws cloudformation deploy --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --template-file ~/project/.circleci/files/backend.yml --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: save ips
          command: | 
              curl -H "Content-Type: text/plain" -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request PUT --data "$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output=text)" https://api.memstash.io/values/ips        
      - run:
          name: create S3 bucket for frontend
          command: aws s3api create-bucket --bucket "frontend${CIRCLE_WORKFLOW_ID:0:7}" --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
      - run:
          name: save s3 arn bucket
          command: |
              curl -H "Content-Type: text/plain" -H "token: 0cd52177-868d-4982-ac51-f1e6b661064a" --request PUT --data "arn:PARTITION:s3:::$(frontend${CIRCLE_WORKFLOW_ID:0:7})" https://api.memstash.io/values/s3bucket      



#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      # - hello-world
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #        - build-frontend
      # - test-backend:
      #     requires:
      #        - build-backend
      # - scan-frontend:
      #     requires:
      #        - test-frontend
      # - scan-backend:
      #     requires:
      #        - test-backend
      - deploy-infrastructure             
